package tcs.ril.storebot.view.Activity;import android.content.Intent;import android.os.Build;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.transition.TransitionManager;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.squareup.picasso.Picasso;import com.squareup.picasso.Transformation;import java.util.ArrayList;import java.util.List;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import tcs.ril.storebot.Network.Util;import tcs.ril.storebot.R;import tcs.ril.storebot.model.PreferenceManager;import tcs.ril.storebot.view.Other.CircleTransform;import tcs.ril.storebot.model.PendingOrder;import tcs.ril.storebot.model.Pick;import tcs.ril.storebot.model.PickTasks;import tcs.ril.storebot.view.Adapter.PendingOrderAdapter;public class ProfileActivity extends AppCompatActivity {    private static final String LOGTAG ="Profile Activity" ;    ImageView back;    LinearLayout cardview,cardDetails;    ImageView profileImage,logout;    TextView userName,userPosition,userEmail,userContact,userAddress;    RecyclerView pendingListView;    RecyclerView.Adapter pendingListAdapter;    RecyclerView.LayoutManager pendingListLayoutManager;    List<PendingOrder> pendingOrderList;    PreferenceManager manager;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_profile);        back=findViewById(R.id.back_btn);        profileImage =findViewById(R.id.profile_img);        back.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {         finish();            }        });        cardDetails=findViewById(R.id.card_details);        userAddress=findViewById(R.id.user_address);        userContact=findViewById(R.id.user_contact);        userEmail=findViewById(R.id.user_email);        userPosition=findViewById(R.id.user_position);        userName=findViewById(R.id.user_name);        logout=findViewById(R.id.logout);        pendingOrderList=new ArrayList<>();        manager=new PreferenceManager(ProfileActivity.this);        Log.d(LOGTAG, "onCreate: "+Util.getAccessToken());        for(int i=0;i<pendingOrderList.size();i++){            Log.d(LOGTAG, "onCreate: Pending Orders "+pendingOrderList.get(i).getClientName());        }        logout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                manager.setAccessToken(PreferenceManager.ACCESS_TOKEN,"LOGIN");                Intent i=new Intent(ProfileActivity.this,LoginActivity.class);                startActivity(i);                finish();            }        });        getPendingData();        /*Recyler View */        pendingListView=findViewById(R.id.pending_orders);        pendingListView.setHasFixedSize(true);        pendingListLayoutManager=new LinearLayoutManager(this);        pendingListView.setLayoutManager(pendingListLayoutManager);        pendingListAdapter=new PendingOrderAdapter(pendingOrderList);        pendingListView.setAdapter(pendingListAdapter);    }    @Override    public void onBackPressed() {        finish();    }    public void getPendingData(){        Util.getUserService().profileResponse(Util.getAccessToken()).enqueue(new Callback<PickTasks>() {            @Override            public void onResponse(Call<PickTasks> call, Response<PickTasks> response) {                if(response.isSuccessful()) {                    PickTasks profileData = response.body();                    if (profileData.isSuccess()) {                        Pick tempProfile=response.body().getPick();                        //Log.d(LOGTAG, "onResponse: " + tempProfile.getAssociate().getName());                        userName.setText(tempProfile.getAssociate().getName());                        userPosition.setText(tempProfile.getAssociate().getDesignination().getName());                        userContact.setText(tempProfile.getAssociate().getMobile());                        userEmail.setText(tempProfile.getAssociate().getEmail());                        userAddress.setText(tempProfile.getAssociate().getAddress());                        String url=LoginActivity.ROOT_URL + "/"+tempProfile.getAssociate().getProfileImg();                        Log.d(LOGTAG, "onResponse: "+url);                        Picasso.get().load(url)                                .transform(new CircleTransform())                                .fit().centerCrop().                                into(profileImage);                        for(int i=0;i<tempProfile.getAssociate().getOrdersAssigned().size();i++)                        {                            PendingOrder temp=new PendingOrder();                            temp.setOrderID(tempProfile.getAssociate().getOrdersAssigned().get(i));                            temp.setClientName(tempProfile.getUsers().get(i));                            pendingOrderList.add(temp);                            pendingListAdapter=new PendingOrderAdapter(pendingOrderList);                            pendingListView.setAdapter(pendingListAdapter);                        }                    }                }            }            @Override            public void onFailure(Call<PickTasks> call, Throwable t) {                Log.d(LOGTAG, "onFailure: Error Occured");            }        });    }}